#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma warning (disable : 4996)

#define Nb	4				
#define Nk	4				

typedef unsigned int WORD;
typedef unsigned char BYTE;

#define HIHEX(x) ( x >> 4 )			
#define LOWHEX(x) ( x & 0x0F )		
#define BTOW(b0, b1, b2, b3) ( ((WORD)b0 << 24) | ((WORD)b1 << 16) | ((WORD)b2 << 8) | (WORD)b3 )	
// 키 입력한것이 마스터키가 되는 것이고 이것을 이용해 총 11개 라운드 키를 만드는데
// 확장 키길이가 176바이트가 되는것이다 그 이유는 라운드 키의 길이는 16바이트 이므로 16*11=176이기 때문에
// 암호화 시에는 맨처음에 AddRoundKey가 실행되고 
// 총 10라운드가 있다 1번부터 9라운드까지는 SubBytes -> ShiftRows -> MixColumns -> AddRoundKey
//                    10번은 MixColumns이 없다


void AES_Cipher(BYTE* in, BYTE* out, BYTE* key);			// 암호화
void AES_Inverse_Cipher(BYTE* in, BYTE* out, BYTE* key);	// 복호화
void SubBytes(BYTE state[][4]);								// SubBytes  -> 정해진 S_box에의해 행,열에따라 값이 정해진다
void ShiftRows(BYTE state[][4]);							// ShiftRows -> 0번행은 변화X, 1번행 왼쪽으로 한비트, 2번행 왼쪽으로 두비트, 3번행은 왼쪽으로 세비트
void MixColumns(BYTE state[][4]);							// MixColumns -> 
/*   2311  이모양의 행열과 곱하는것이다
     1231
	 1123
	 3112
*/
void Inv_SubBytes(BYTE state[][4]);							// Invers SubBytes  // Inv_S_Box
void Inv_ShiftRows(BYTE state[][4]);						// Invers ShiftRows // 오른쪽으로
void Inv_MixColumns(BYTE state[][4]);						// Invers MixColumns // 
/*  DBE9
    9DBE
	E9DB
	BE9D
*/

void AddRoundKey(BYTE state[][4], WORD*);					// AddRoundKey // 키 입력에 대하여 라운드키 총 11개 생성
void KeyExpansion(BYTE* key, WORD* W);						// 위에 라운드키를 만들기 위한 방법
void CirShiftRows(BYTE* row);								
void Inv_CirShiftRows(BYTE* row);							


WORD SubWord(WORD W);										// SubWord  
WORD RotWord(WORD W);										// RotWord    
BYTE x_time(BYTE n, BYTE b);								
BYTE x_time_1(BYTE n, BYTE b);								

// 주어지는 것
BYTE S_box[16][16] = {
	99, 124, 119, 123, 242, 107, 111, 197,  48,   1, 103,  43, 254, 215, 171, 118,
	202, 130, 201, 125, 250,  89,  71, 240, 173, 212, 162, 175, 156, 164, 114, 192,
	183, 253, 147,  38,  54,  63, 247, 204,  52, 165, 229, 241, 113, 216,  49,  21,
	4, 199,  35, 195,  24, 150,   5, 154,   7,  18, 128, 226, 235,  39, 178, 117,
	9, 131,  44,  26,  27, 110,  90, 160,  82,  59, 214, 179,  41, 227,  47, 132,
	83, 209,   0, 237,  32, 252, 177,  91, 106, 203, 190,  57,  74,  76,  88, 207,
	208, 239, 170, 251,  67,  77,  51, 133,  69, 249,   2, 127,  80,  60, 159, 168,
	81, 163,  64, 143, 146, 157,  56, 245, 188, 182, 218,  33,  16, 255, 243, 210,
	205,  12,  19, 236,  95, 151,  68,  23, 196, 167, 126,  61, 100,  93,  25, 115,
	96, 129,  79, 220,  34,  42, 144, 136,  70, 238, 184,  20, 222,  94,  11, 219,
	224,  50,  58,  10,  73,   6,  36,  92, 194, 211, 172,  98, 145, 149, 228, 121,
	231, 200,  55, 109, 141, 213,  78, 169, 108,  86, 244, 234, 101, 122, 174,   8,
	186, 120,  37,  46,  28, 166, 180, 198, 232, 221, 116,  31,  75, 189, 139, 138,
	112,  62, 181, 102,  72,   3, 246,  14,  97,  53,  87, 185, 134, 193,  29, 158,
	225, 248, 152,  17, 105, 217, 142, 148, 155,  30, 135, 233, 206,  85,  40, 223,
	140, 161, 137,  13, 191, 230,  66, 104,  65, 153,  45,  15, 176,  84, 187,  22,
};

// S-box
BYTE Inv_S_box[16][16] = {
	82,   9, 106, 213,  48,  54, 165,  56, 191,  64, 163, 158, 129, 243, 215, 251,
	124, 227,  57, 130, 155,  47, 255, 135,  52, 142,  67,  68, 196, 222, 233, 203,
	84, 123, 148,  50, 166, 194,  35,  61, 238,  76, 149,  11,  66, 250, 195,  78,
	8,  46, 161, 102,  40, 217,  36, 178, 118,  91, 162,  73, 109, 139, 209,  37,
	114, 248, 246, 100, 134, 104, 152,  22, 212, 164,  92, 204,  93, 101, 182, 146,
	108, 112,  72,  80, 253, 237, 185, 218,  94,  21,  70,  87, 167, 141, 157, 132,
	144, 216, 171,   0, 140, 188, 211,  10, 247, 228,  88,   5, 184, 179,  69,   6,
	208,  44,  30, 143, 202,  63,  15,   2, 193, 175, 189,   3,   1,  19, 138, 107,
	58, 145,  17,  65,  79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115,
	150, 172, 116,  34, 231, 173,  53, 133, 226, 249,  55, 232,  28, 117, 223, 110,
	71, 241,  26, 113,  29,  41, 197, 137, 111, 183,  98,  14, 170,  24, 190,  27,
	252,  86,  62,  75, 198, 210, 121,  32, 154, 219, 192, 254, 120, 205,  90, 244,
	31, 221, 168,  51, 136,   7, 199,  49, 177,  18,  16,  89,  39, 128, 236,  95,
	96,  81, 127, 169,  25, 181,  74,  13,  45, 229, 122, 159, 147, 201, 156, 239,
	160, 224,  59,  77, 174,  42, 245, 176, 200, 235, 187,  60, 131,  83, 153,  97,
	23,  43,   4, 126, 186, 119, 214,  38, 225, 105,  20,  99,  85,  33,  12, 125,
};

// Rcon
static WORD Rcon[11] = { 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000 };
static int Nr;



int main()
{
	FILE *fp;		// 평문 파일을 생성하고 이용하기 위한 변수
	FILE *fpenc;    // 파일을 암호화한 파일을 저장하기 위한 변수
	FILE *fpg;		// 암호문을 다시 열기 위한 변수
	FILE *fpdec;	// 복호화한 값을 저장하기 위한 변수

	int i, length=0;
	int msg_len = 0, block_count = 0;
	int ans;
	BYTE p_text[128] = { 0, }; // 평문에 대한 변수
	BYTE key[Nk * 4 + 1] = { 0, }; // 키에 대한 변수
	BYTE c_text[128] = { 0, }; // p_text에 있는 값을 암호화
	BYTE c1_text[128] = { 0, }; // storyenc를 읽어오기 위한 배열
	BYTE inv_c_text[128] = { 0, };


	fp = fopen("C:\\Users\\곽용구\\Desktop\\4조(평문).txt","w+");     // c_text에 있는 값을
	printf("평문을 입력하세요 : ");
	gets((char*)p_text);
	fputs((char*)p_text, fp);							     // 4조(평문)enc.txt에 쓰기
	fclose(fp);												     // fputs(출력할 변수명, 스트림)

	msg_len = (int)strlen((char*)p_text);      // 입력한 평문에 대한 길이

	printf("\n* 평문 : ");
	for (i = 0; i<msg_len; i++)	
		printf("%c", p_text[i]);
	printf("\n");											  

	printf("* 비밀키 입력 : ");
	scanf("%s", key);
	getchar();

	if((msg_len % (Nb*4)) > 0)							// 비트가 16의 배수가 아닌경우 빈공간을
	{													// 0으로 채워준다.
		block_count = (msg_len / (Nb*4)) + 1;
		for(i=msg_len; i<block_count*Nb*4; i++)
		{
			p_text[i] = '0';
		}
	}
	else
		block_count = msg_len / (Nb*4);					// 16비트일경우 block_count값 결정

	printf("\n* 보완된 평문 : ");						// 빈공간에 0을 넣어준 평문 값
	for (i = 0; i<block_count * Nb * 4; i++)  
		printf("%c", p_text[i]);
	printf("\n");

	// 암호화
	for (i = 0; i < block_count; i++)
		AES_Cipher(&p_text[i * Nb * 4], &c_text[i * Nb * 4], key);
												// w+는 파일이 존재하지 않는경우 생성후 쓰기
	fpenc = fopen("C:\\Users\\곽용구\\Desktop\\4조enc.txt","w+");     // c_text에 있는 값을
	fputs((char*)c_text, fpenc);					// 4조(평문)enc에 쓰기
	fclose(fpenc);							// fputs(출력할 변수명, 스트림)
	printf("\n* 암호문 : ");
	for (i = 0; i<block_count * Nb * 4; i++)
		printf("%c", c_text[i]);
	printf("\n");

	printf("복호문 파일을 생성하시겠습니까?(Y=1/N=2) : ");
	scanf("%d", &ans);
	if(ans==1)
	{
		// 복호화
		for (i = 0; i < block_count; i++)
			AES_Inverse_Cipher(&c_text[i * Nb * 4], &inv_c_text[i * Nb * 4], key);	

		if((msg_len % (Nb*4)) > 0)						// 복호화 된 값이 16 배수가 아닌경우 0값이 생기는 것을 NULL값으로 바꿔준다
		{
			block_count = (msg_len / (Nb*4)) + 1;
			for(i=msg_len; i<block_count*Nb*4; i++)		// 복호문은 빈공간을 설정할 필요가 없기 때문에
			{
				inv_c_text[i] = '\n';
			}
		}	
													// w+는 파일이 존재하지 않는경우 생성후 쓰기
		fpdec = fopen("C:\\Users\\곽용구\\Desktop\\4조dec.txt","w+");     // c_text에 있는 값을
		fputs((char*)inv_c_text, fpdec);							// 4조(평문)dec.txt에 쓰기
		fclose(fpdec);										// fputs(출력할 변수명, 스트림)
		printf("\n* 복호문 : ");
		for (i = 0; i<msg_len; i++)	
			printf("%c", inv_c_text[i]);
		printf("\n");	
	}
	else
	{
		printf("복호문 파일이 생성되지 않았습니다.\n");
		return 0;
	}
}

